# PPO (Proximal Policy Optimization) implementation from CleanRL
# Docs: https://docs.cleanrl.dev/rl-algorithms/ppo/#ppopy
# Based on "The 37 Implementation Details of PPO" ‚Äî includes all core tricks for stable training

import os
import random
import time
from dataclasses import dataclass

import gymnasium as gym
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import tyro
from torch.distributions.categorical import Categorical, Normal
from torch.utils.tensorboard import SummaryWriter


@dataclass
class Args:
    # üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    exp_name: str = os.path.basename(__file__)[: -len(".py")]
    """–ò–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º—è —Ñ–∞–π–ª–∞"""
    seed: int = 1
    """–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏"""
    torch_deterministic: bool = True
    """–í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ PyTorch (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ)"""
    cuda: bool = True
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω"""
    track: bool = False
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ Weights & Biases"""
    wandb_project_name: str = "cleanRL"
    wandb_entity: str = None
    capture_video: bool = False
    """–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ —ç–ø–∏–∑–æ–¥–æ–≤ –∞–≥–µ–Ω—Ç–∞"""

    # üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    env_id: str = "CartPole-v1"
    """–°—Ä–µ–¥–∞ –∏–∑ Gymnasium"""
    total_timesteps: int = 500000
    """–û–±—â–µ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ä–µ–¥–æ–π"""
    learning_rate: float = 2.5e-4
    """–ù–∞—á–∞–ª—å–Ω—ã–π learning rate –¥–ª—è Adam"""
    num_envs: int = 4
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ä–µ–¥ ‚Äî —É—Å–∫–æ—Ä—è–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    num_steps: int = 128
    """–î–ª–∏–Ω–∞ rollout'–∞ –≤ –∫–∞–∂–¥–æ–π —Å—Ä–µ–¥–µ (T)"""
    anneal_lr: bool = True
    """–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å learning rate –¥–æ –Ω—É–ª—è –∫ –∫–æ–Ω—Ü—É –æ–±—É—á–µ–Ω–∏—è"""
    gamma: float = 0.99
    """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Œ≥"""
    gae_lambda: float = 0.95
    """Œª –¥–ª—è Generalized Advantage Estimation (GAE) ‚Äî –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É bias –∏ variance"""
    num_minibatches: int = 4
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–∏–±–∞—Ç—á–µ–π –Ω–∞ –æ–¥–∏–Ω rollout"""
    update_epochs: int = 4
    """–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±—É—Ñ–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (K —ç–ø–æ—Ö)"""
    norm_adv: bool = True
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å advantage: (A - mean) / (std + Œµ) ‚Äî —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ"""
    clip_coef: float = 0.2
    """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç clipping'–∞ Œµ –≤ PPO ‚Äî –æ–±—ã—á–Ω–æ 0.1‚Äì0.3"""
    clip_vloss: bool = True
    """Clipping –∏ –¥–ª—è value loss ‚Äî –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–µ PPO"""
    ent_coef: float = 0.01
    """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–Ω—Ç—Ä–æ–ø–∏–π–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî –ø–æ–æ—â—Ä—è–µ—Ç exploration"""
    vf_coef: float = 0.5
    """–í–µ—Å –ª–æ—Å—Å–∞ –∫—Ä–∏—Ç–∏–∫–∞ –≤ –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å"""
    max_grad_norm: float = 0.5
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç exploding gradients"""
    target_kl: float = None
    """–ü–æ—Ä–æ–≥ KL-–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –¥–ª—è early stopping (None = –æ—Ç–∫–ª—é—á–µ–Ω–æ)"""

    # üìè –í—ã—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    batch_size: int = 0
    """–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: num_envs * num_steps"""
    minibatch_size: int = 0
    """–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –º–∏–Ω–∏–±–∞—Ç—á–∞"""
    num_iterations: int = 0
    """–ß–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–±—É—á–µ–Ω–∏—è: total_timesteps / batch_size"""


def make_env(env_id, idx, capture_video, run_name):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–µ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    def thunk():
        if capture_video and idx == 0:
            env = gym.make(env_id, render_mode="rgb_array")
            env = gym.wrappers.RecordVideo(env, f"videos/{run_name}")
        else:
            env = gym.make(env_id)
        # –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤
        env = gym.wrappers.RecordEpisodeStatistics(env)
        return env
    return thunk


def layer_init(layer, std=np.sqrt(2), bias_const=0.0):
    """–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ ‚Äî —É–ª—É—á—à–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è."""
    torch.nn.init.orthogonal_(layer.weight, std)
    torch.nn.init.constant_(layer.bias, bias_const)
    return layer


class Agent(nn.Module):
    """–ê–≥–µ–Ω—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏ –¥–ª—è –∞–∫—Ç–æ—Ä–∞ (–ø–æ–ª–∏—Ç–∏–∫–∏) –∏ –∫—Ä–∏—Ç–∏–∫–∞ (—Ü–µ–Ω–Ω–æ—Å—Ç–∏)."""
    def __init__(self, envs):
        super().__init__()
        # –ö—Ä–∏—Ç–∏–∫: –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç V(s)
        self.critic = nn.Sequential(
            layer_init(nn.Linear(np.array(envs.single_observation_space.shape).prod(), 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, 1), std=1.0),  # std=1.0 –¥–ª—è –≤—ã—Ö–æ–¥–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        )
        # –ê–∫—Ç–æ—Ä: –≤—ã–¥–∞—ë—Ç logits –¥–ª—è –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.actor = nn.Sequential(
            layer_init(nn.Linear(np.array(envs.single_observation_space.shape).prod(), 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, envs.single_action_space.n), std=0.01),  # std=0.01 ‚Äî —Å–ª–∞–±–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        )

    def get_value(self, x):
        return self.critic(x)

    def get_action_and_value(self, x, action=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, logprob, —ç–Ω—Ç—Ä–æ–ø–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å."""
        logits = self.actor(x)
        probs = Categorical(logits=logits)
        if action is None:
            action = probs.sample()  # –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        return action, probs.log_prob(action), probs.entropy(), self.critic(x)

class RPOAgent(nn.Module):
    def __init__(self, envs):
        super().__init__()
        self.critic = nn.Sequential(
            layer_init(nn.Linear(np.array(envs.single_observation_space.shape).prod(), 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, 1), std=1.0),
        )
        self.actor_mean = nn.Sequential(
            layer_init(nn.Linear(np.array(envs.single_observation_space.shape).prod(), 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, 64)),
            nn.Tanh(),
            layer_init(nn.Linear(64, np.prod(envs.single_action_space.shape)), std=0.01),
        )
        self.actor_logstd = nn.Parameter(torch.zeros(1, np.prod(envs.single_action_space.shape)))

    def get_value(self, x):
        return self.critic(x)

    def get_action_and_value(self, x, action=None):
        action_mean = self.actor_mean(x)
        action_logstd = self.actor_logstd.expand_as(action_mean)
        action_std = torch.exp(action_logstd)
        probs = Normal(action_mean, action_std)
        if action is None:
            action = probs.sample()
        else: # new to RPO
            # sample again to add stochasticity, for the policy update
            z = torch.FloatTensor(action_mean.shape).uniform_(-self.rpo_alpha, self.rpo_alpha)
            action_mean = action_mean + z
            probs = Normal(action_mean, action_std)


if __name__ == "__main__":
    args = tyro.cli(Args)
    # üìê –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –±—É—Ñ–µ—Ä–æ–≤
    args.batch_size = int(args.num_envs * args.num_steps)
    args.minibatch_size = int(args.batch_size // args.num_minibatches)
    args.num_iterations = args.total_timesteps // args.batch_size

    run_name = f"{args.env_id}__{args.exp_name}__{args.seed}__{int(time.time())}"
    if args.track:
        import wandb
        wandb.init(
            project=args.wandb_project_name,
            entity=args.wandb_entity,
            sync_tensorboard=True,
            config=vars(args),
            name=run_name,
            monitor_gym=True,
            save_code=True,
        )
    writer = SummaryWriter(f"runs/{run_name}")
    writer.add_text(
        "hyperparameters",
        "|param|value|\n|-|-|\n%s" % ("\n".join([f"|{key}|{value}|" for key, value in vars(args).items()])),
    )

    # üîí –§–∏–∫—Å–∏—Ä—É–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(args.seed)
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)
    torch.backends.cudnn.deterministic = args.torch_deterministic

    device = torch.device("cuda" if torch.cuda.is_available() and args.cuda else "cpu")

    # üåê –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã)
    envs = gym.vector.SyncVectorEnv(
        [make_env(args.env_id, i, args.capture_video, run_name) for i in range(args.num_envs)],
    )
    assert isinstance(envs.single_action_space, gym.spaces.Discrete), "–¢–æ–ª—å–∫–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"

    agent = Agent(envs).to(device)
    optimizer = optim.Adam(agent.parameters(), lr=args.learning_rate, eps=1e-5)  # eps=1e-5 ‚Äî –∫–∞–∫ –≤ OpenAI Baselines

    # üóÉÔ∏è –ë—É—Ñ–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö rollout'–∞
    obs = torch.zeros((args.num_steps, args.num_envs) + envs.single_observation_space.shape).to(device)
    actions = torch.zeros((args.num_steps, args.num_envs) + envs.single_action_space.shape).to(device)
    logprobs = torch.zeros((args.num_steps, args.num_envs)).to(device)  # ‚Üê —ç—Ç–æ œÄ_old!
    rewards = torch.zeros((args.num_steps, args.num_envs)).to(device)
    dones = torch.zeros((args.num_steps, args.num_envs)).to(device)
    values = torch.zeros((args.num_steps, args.num_envs)).to(device)

    # üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    global_step = 0
    start_time = time.time()
    next_obs, _ = envs.reset(seed=args.seed)
    next_obs = torch.Tensor(next_obs).to(device)
    next_done = torch.zeros(args.num_envs).to(device)

    for iteration in range(1, args.num_iterations + 1):
        # üìâ –£–º–µ–Ω—å—à–µ–Ω–∏–µ learning rate (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if args.anneal_lr:
            frac = 1.0 - (iteration - 1.0) / args.num_iterations
            lrnow = frac * args.learning_rate
            optimizer.param_groups[0]["lr"] = lrnow

        # üì• –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (rollout)
        for step in range(0, args.num_steps):
            global_step += args.num_envs
            obs[step] = next_obs
            dones[step] = next_done

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ª–æ–≥-–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ë–ï–ó –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (on-policy!)
            with torch.no_grad():
                action, logprob, _, value = agent.get_action_and_value(next_obs)
                values[step] = value.flatten()
            actions[step] = action
            logprobs[step] = logprob  # ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º œÄ_old(a|s) –¥–ª—è PPO loss!

            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ –≤ —Å—Ä–µ–¥–µ
            next_obs, reward, terminations, truncations, infos = envs.step(action.cpu().numpy())
            next_done = np.logical_or(terminations, truncations)
            rewards[step] = torch.tensor(reward).to(device).view(-1)
            next_obs, next_done = torch.Tensor(next_obs).to(device), torch.Tensor(next_done).to(device)

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã
            if "final_info" in infos:
                for info in infos["final_info"]:
                    if info and "episode" in info:
                        print(f"global_step={global_step}, episodic_return={info['episode']['r']}")
                        writer.add_scalar("charts/episodic_return", info["episode"]["r"], global_step)
                        writer.add_scalar("charts/episodic_length", info["episode"]["l"], global_step)

        # üîÅ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ advantage —Å –ø–æ–º–æ—â—å—é GAE
        with torch.no_grad():
            next_value = agent.get_value(next_obs).reshape(1, -1)
            advantages = torch.zeros_like(rewards).to(device)
            lastgaelam = 0
            for t in reversed(range(args.num_steps)):
                if t == args.num_steps - 1:
                    nextnonterminal = 1.0 - next_done
                    nextvalues = next_value
                else:
                    nextnonterminal = 1.0 - dones[t + 1]
                    nextvalues = values[t + 1]
                # TD-–æ—à–∏–±–∫–∞
                delta = rewards[t] + args.gamma * nextvalues * nextnonterminal - values[t]
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ GAE
                advantages[t] = lastgaelam = delta + args.gamma * args.gae_lambda * nextnonterminal * lastgaelam
            returns = advantages + values  # Return = Advantage + Value

        # üß± –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [T, N, ...] ‚Üí [T*N, ...] –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        b_obs = obs.reshape((-1,) + envs.single_observation_space.shape)
        b_logprobs = logprobs.reshape(-1)      # ‚Üê œÄ_old (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!)
        b_actions = actions.reshape((-1,) + envs.single_action_space.shape)
        b_advantages = advantages.reshape(-1)
        b_returns = returns.reshape(-1)
        b_values = values.reshape(-1)

        # üîÅ –û–±—É—á–µ–Ω–∏–µ: K —ç–ø–æ—Ö –Ω–∞ –æ–¥–Ω–æ–º –±—É—Ñ–µ—Ä–µ
        b_inds = np.arange(args.batch_size)
        clipfracs = []
        for epoch in range(args.update_epochs):
            np.random.shuffle(b_inds)  # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è –º–∏–Ω–∏–±–∞—Ç—á–µ–π
            for start in range(0, args.batch_size, args.minibatch_size):
                end = start + args.minibatch_size
                mb_inds = b_inds[start:end]

                # –ü–æ–ª—É—á–∞–µ–º –ù–û–í–´–ï logprob –∏ value –¥–ª—è —Ç–µ—Ö –∂–µ (s, a)
                _, newlogprob, entropy, newvalue = agent.get_action_and_value(b_obs[mb_inds], b_actions.long()[mb_inds])
                logratio = newlogprob - b_logprobs[mb_inds]  # log(œÄ_Œ∏ / œÄ_old)
                ratio = logratio.exp()  # r_t(Œ∏) = œÄ_Œ∏(a|s) / œÄ_old(a|s)

                # üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                with torch.no_grad():
                    old_approx_kl = (-logratio).mean()  # k1 estimator KL
                    approx_kl = ((ratio - 1) - logratio).mean()  # k3 estimator ‚Äî —Ç–æ—á–Ω–µ–µ
                    clipfracs += [((ratio - 1.0).abs() > args.clip_coef).float().mean().item()]

                mb_advantages = b_advantages[mb_inds]
                if args.norm_adv:
                    mb_advantages = (mb_advantages - mb_advantages.mean()) / (mb_advantages.std() + 1e-8)

                # üìâ PPO Clipped Policy Loss
                pg_loss1 = -mb_advantages * ratio
                pg_loss2 = -mb_advantages * torch.clamp(ratio, 1 - args.clip_coef, 1 + args.clip_coef)
                pg_loss = torch.max(pg_loss1, pg_loss2).mean()  # ‚Üê –±–µ—Ä—ë–º —Ö—É–¥—à–∏–π —Å–ª—É—á–∞–π (conservative update)

                # üìâ Value Loss (—Å clipping'–æ–º, –∫–∞–∫ –≤ —Å—Ç–∞—Ç—å–µ)
                newvalue = newvalue.view(-1)
                if args.clip_vloss:
                    v_loss_unclipped = (newvalue - b_returns[mb_inds]) ** 2
                    v_clipped = b_values[mb_inds] + torch.clamp(
                        newvalue - b_values[mb_inds],
                        -args.clip_coef,
                        args.clip_coef,
                    )
                    v_loss_clipped = (v_clipped - b_returns[mb_inds]) ** 2
                    v_loss = 0.5 * torch.max(v_loss_unclipped, v_loss_clipped).mean()
                else:
                    v_loss = 0.5 * ((newvalue - b_returns[mb_inds]) ** 2).mean()

                entropy_loss = entropy.mean()
                # üí° –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å: policy + value + —ç–Ω—Ç—Ä–æ–ø–∏—è
                loss = pg_loss - args.ent_coef * entropy_loss + v_loss * args.vf_coef

                optimizer.zero_grad()
                loss.backward()
                nn.utils.clip_grad_norm_(agent.parameters(), args.max_grad_norm)  # ‚Üê –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–∏–µ —à–∞–≥–∏
                optimizer.step()

            # üõë Early stopping –ø–æ KL (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–æ—Ä–æ–≥)
            if args.target_kl is not None and approx_kl > args.target_kl:
                break

        # üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–∏—Ç–∏–∫–∞
        y_pred, y_true = b_values.cpu().numpy(), b_returns.cpu().numpy()
        var_y = np.var(y_true)
        explained_var = np.nan if var_y == 0 else 1 - np.var(y_true - y_pred) / var_y

        # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ TensorBoard
        writer.add_scalar("charts/learning_rate", optimizer.param_groups[0]["lr"], global_step)
        writer.add_scalar("losses/value_loss", v_loss.item(), global_step)
        writer.add_scalar("losses/policy_loss", pg_loss.item(), global_step)
        writer.add_scalar("losses/entropy", entropy_loss.item(), global_step)
        writer.add_scalar("losses/old_approx_kl", old_approx_kl.item(), global_step)
        writer.add_scalar("losses/approx_kl", approx_kl.item(), global_step)
        writer.add_scalar("losses/clipfrac", np.mean(clipfracs), global_step)  # –¥–æ–ª—è clipped –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        writer.add_scalar("losses/explained_variance", explained_var, global_step)
        print("SPS:", int(global_step / (time.time() - start_time)))
        writer.add_scalar("charts/SPS", int(global_step / (time.time() - start_time)), global_step)

    envs.close()
    writer.close()